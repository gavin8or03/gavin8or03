{"version":3,"sources":["js/lessons/ES6arrayHelpers.js","js/lessons/lesson-one.js","js/main.js"],"names":["theForLoop","moods","i","length","console","log","theForEachLoop","forEach","mood","theMapHelper","teams","name","coach","country","wins","losses","draws","matchWinners","map","team","theFilterHelper","notUSATeams","filter","theReduceHelper","matchResults","seasonResults","reduce","match","result","array1","reducer","previousValue","currentValue","classicStringConcatenation","stringBase","stringTemplates","addition"],"mappings":";AA+HA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,QAAA,aAAA,QAAA,WAAA,QAAA,eAAA,QAAA,qBAAA,EArHA,IAAMA,EAAa,WAEV,IADCC,IAAAA,EAAQ,CAAC,WAAY,QAAS,MAAO,SAClCC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAC9BE,QAAQC,IAAI,SAAUJ,EAAMC,KAkHpC,QAAA,WAAA,EA9GA,IAAMI,EAAiB,WAEL,CAAC,WAAY,QAAS,MAAO,SAErCC,QAAQ,SAAAC,GAAQJ,OAAAA,QAAQC,IAAIG,MA0GtC,QAAA,eAAA,EAtGA,IAAMC,EAAe,WACXC,IAAAA,EAAQ,CACV,CACIC,KAAM,oBACNC,MAAO,uBACPC,QAAS,UACTC,KAAM,EACNC,OAAQ,EACRC,MAAO,GAEX,CACIL,KAAM,gBACNC,MAAO,oBACPC,QAAS,UACTC,KAAM,EACNC,OAAQ,EACRC,MAAO,GAEX,CACIL,KAAM,eACNC,MAAO,eACPC,QAAS,2BACTC,KAAM,EACNC,OAAQ,EACRC,MAAO,IAITC,EAAeP,EAAMQ,IAAI,SAAAC,GAAQA,OAAAA,EAAKL,MAAQ,IAEpDV,QAAQC,IAAI,CAAEK,MAAAA,IACdN,QAAQC,IAAI,CAAEY,aAAAA,KAuElB,QAAA,aAAA,EApEA,IAAMG,EAAkB,WAEdV,IAAAA,EAAQ,CAEV,CACIC,KAAM,oBACNC,MAAO,uBACPC,QAAS,UACTC,KAAM,EACNC,OAAQ,EACRC,MAAO,GAEX,CACIL,KAAM,gBACNC,MAAO,oBACPC,QAAS,UACTC,KAAM,EACNC,OAAQ,EACRC,MAAO,GAEP,CACIL,KAAM,eACNC,MAAO,eACPC,QAAS,2BACTC,KAAM,EACNC,OAAQ,EACRC,MAAO,IAIbK,EAAcX,EAAMY,OAAO,SAAAH,GAAQA,MAAiB,6BAAjBA,EAAKN,UAE9CT,QAAQC,IAAI,CAAEK,MAAAA,IACdN,QAAQC,IAAI,CAAEgB,YAAAA,KAmClB,QAAA,gBAAA,EA7BA,IAAME,EAAkB,WACdC,IAEAC,EAFe,CAAC,MAAO,MAAO,MAAO,OAAQ,OAAQ,MAAO,MAAO,MAAO,OAAQ,OAErDC,OAAO,SAACC,EAAOC,GAEvCD,OADPA,EAAMC,IAAWD,EAAMC,IAAW,GAAK,EAChCD,GAER,IAEHvB,QAAQC,IAAI,CAAEoB,cAAAA,KAoBlB,QAAA,gBAAA,EATA,IAAMI,EAAS,CAAC,EAAG,EAAG,EAAG,GACnBC,EAAU,SAACC,EAAeC,GAAiBD,OAAAA,EAAgBC,GAGjE5B,QAAQC,IAAIwB,EAAOH,OAAOI,IAI1B1B,QAAQC,IAAIwB,EAAOH,OAAOI,EAAS;;ACGnC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,QAAA,gCAAA,EAjIA,IAAMG,EAA6B,WACzBC,IAQAN,EARa,kCACE,EAO8B,GAEnDxB,QAAQC,IAAIuB,IAsHhB,QAAA,2BAAA,EAlHA,IAAMO,EAAkB,WAOpB/B,QAAQC,IAAO6B,GAAAA,OANI,iCAMSE,OAAS,EAAG,UA2G5C,QAAA,gBAAA;;AC3FA,aA7BA,IAAA,EAAA,QAAA,6BAcA,EAAA,QAAA,yBANA,EAAA,EAAA,eACA,EAAA,EAAA,mBACA,EAAA,EAAA,iBACA,EAAA,EAAA,oBACA,EAAA,EAAA,oBAYA,EACA,EAAA","file":"main.535a9c62.js","sourceRoot":"..","sourcesContent":["// const theForLoop = () => {\n//     const moods = ['Ecstatic', 'Happy', 'meh', 'Upset'];\n\n//     for (let i = 0; i < moods.length; i++){\n//         console.log(\"I am: \", moods[i]);\n//     }\n// }\n\n//1///////////////////////////////////////////////////////// \n\nconst theForLoop = () => {\n    const moods = ['Ecstatic', 'Happy', 'meh', 'Upset'];\n    for (let i = 0; i < moods.length; i++){\n        console.log(\"I am: \", moods[i]);\n    }\n}\n\nconst theForEachLoop = () => {\n    \n    const moods = ['Ecstatic', 'Happy', 'meh', 'Upset'];\n\n    moods.forEach(mood => console.log(mood))\n    \n}\n\nconst theMapHelper = () => {\n    const teams = [\n        {\n            name: 'Manchester United',\n            coach: 'Ole Gunnar Soklsjear',\n            country: \"England\",\n            wins: 5,\n            losses: 2,\n            draws: 1            \n        },\n        {\n            name: 'Bayern Munich',\n            coach: 'Julian Nagelsmann',\n            country: \"Germany\",\n            wins: 6,\n            losses: 1,\n            draws: 1\n        },\n        {\n            name: 'Orlando City',\n            coach: 'Oscar Pareja',\n            country: \"United States of America\",\n            wins: 4,\n            losses: 2,\n            draws: 2\n        },\n    ]\n\n    const matchWinners = teams.map(team => team.wins += 1);\n\n    console.log({ teams });\n    console.log({ matchWinners });\n}\n\nconst theFilterHelper = () => {\n    \n    const teams = [\n    \n        {\n            name: 'Manchester United',\n            coach: 'Ole Gunnar Soklsjear',\n            country: \"England\",\n            wins: 5,\n            losses: 2,\n            draws: 1            \n        },\n        {\n            name: 'Bayern Munich',\n            coach: 'Julian Nagelsmann',\n            country: \"Germany\",\n            wins: 6,\n            losses: 1,\n            draws: 1\n        },\n            {\n                name: 'Orlando City',\n                coach: 'Oscar Pareja',\n                country: \"United States of America\",\n                wins: 4,\n                losses: 2,\n                draws: 2\n            },\n    ]\n    \n    const notUSATeams = teams.filter(team => team.country !== 'United States of America');\n\n    console.log({ teams });\n    console.log({ notUSATeams });\n\n}\n\n\n\nconst theReduceHelper = () => {\n    const matchResults = ['win', 'win', 'win', 'draw', 'loss', 'win', 'win', 'win', 'draw', 'win'];\n\n    const seasonResults = matchResults.reduce((match, result) => {\n        match[result] = (match[result] || 0) + 1;\n        return match;\n    \n    }, {})\n    \n    console.log({ seasonResults });\n}\n\nexport {\n    theForLoop,\n    theForEachLoop,\n    theMapHelper,\n    theFilterHelper,\n    theReduceHelper\n}\n\nconst array1 = [1, 2, 3, 4,];\nconst reducer = (previousValue, currentValue) => previousValue + currentValue;\n\n// 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer));\n//expected output: 10\n\n// 5 + 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer, 5));\n// expected output: 15\n\n","const classicStringConcatenation = ()=>{\n    const stringBase = 'The answer to the problem is: ';\n    const initialValue = 1;\n\n    const addition = (a, b) => {\n        return a + b;\n\n    }\n\n    const result = stringBase + addition(initialValue, 5);\n\n    console.log(result);\n}\n\n\nconst stringTemplates = () => {\n    const stringBase = 'The answer to the problem is:';\n    const initialValue = 1;\n\n    const addition = (a, b) => {\n        return a + b;\n    }\n    console.log(`${stringBase}${addition(1, \"five\")}`);\n}\n\nexport {\n    classicStringConcatenation,\n    stringTemplates,\n}\n\n// const stringTemplates = () => {\n//     const stringBase = 'The answer to the problem is: ';\n//     const initialValue = 0;\n\n//     const additionValues = [0, 1, 2, 3, 4, 5, 6, 7];\n//     const addition = (a, b) => a + b;\n\n//     console.log(`${stringBase}${additionalValues.reduce(addition, initialValue)}`);\n// }\n\n// const ternaries = () => {\n//     const equipment = ['ball', 'net', 'net', 'water cooler', 'flag', 'flag', 'flag', 'flag'];\n\n//     console.log(equipmentCheck.ball >= 1 ? \"We have a ball\" : \"We need a ball\");\n//     console.log(equipmentCheck.net >= 1 ? \"We have enough nets\" : \"We need more nets\");\n    \n// }\n\n// const ternaries = () => {\n//     const equipment = ['ball', 'net', 'net', 'water cooler', 'flag', 'flag', 'flag', 'flag'];\n\n//     console.log(equipmentCheck.ball >= 1 ? \"We have a ball\" : \"We need a ball\");\n//     console.log(equipmentCheck.net >= 1 ? \"We have enough nets\" : \"We need more nets\");\n    \n// }\n\n// const objectLiterals = () => {\n//     const createGreetingCard = (\n//         nameTo,\n//         nameFrom,\n//         opening,\n//         closing,\n//         massage) => {\n//         {\n//             nameTo,\n//             nameFrom,\n//             opening,\n//             closing,\n//             massage\n//         }\n//     };\n\n//     const newGreeting = createGreetingCard(\"Ember\", \"Woody\", \"Dear\", \"Love\", \"You're my favorite Deputy\");\n\n//     console.log(newGreeting);\n//     console.log(newGreeting.nameTo);\n\n// }\n\n// export {\n//     classicStringConcatenation,\n//     stringTemplates,\n//     ternaries,\n//     objectLiterals,\n// }\n\n// const spreadAndRest = () => {\n//     const stringBase = 'The answer to the problem is: ';\n//     const initialValue = 0;\n\n//     const addition = (...numbers) => {\n//         return numbers.reduce(reducer, initialValue);\n//     }\n\n//     const result = stringBase + addition(1, 2, 3, 4, 5, 6, 100, 200, 300, 500);\n\n//     console.log(result);\n// }\n\n// export {\n//     classicStringConcatenation,\n//     stringTemplates,\n//     ternaries,\n//     objectLiterals,\n//     spreadAndRest\n// }\n\n// const listOfNumbers = [1, 2, 3, 4, 5, 6, 100, 200, 300, 500];\n// const copyOfListOfNumbers = [...listOfNumbers];\n// console.log({ listOfNumbers });\n// console.log({ copyOfListOfNumbers });\n\n// const destructureArray = () => {\n//     const manufacturers = ['Ford', 'BMW', 'KIA', 'Dodge', 'Mercedes', 'Lincoln', 'Audi'];\n\n//     const [manufacturer, ...more] = manufacturers;\n\n//     console.log(manufacturer);\n//     console.log(more);\n//     console.log(`${manufacturer} and ${more.length} more manufacturers`);\n// }\n\n// export {\n//     classicStringConcatenation,\n//     stringTemplates,\n//     ternaries,\n//     objectLiterals,\n//     spreadAndRest,\n//     destructureArray\n// }\n    \n","// import color from './modules/demo.js';\n// import {\n//     soda,\n//     candy\n// } from \"./modules/demo2.js\";\n\n// console.log({ color });\n// console.log({ candy });\n\nimport {\n    theForLoop,\n    theForEachLoop,\n    theMapHelper,\n    theFilterHelper,\n    theReduceHelper,\n} from \"./lessons/ES6arrayHelpers\";\n\ntheForLoop();\ntheForEachLoop();\ntheMapHelper();\ntheFilterHelper();\ntheReduceHelper();\n\nimport {\n    classicStringConcatenation,\n    // stringTemplates\n    // ternaries,\n    // objectLiterals,\n    // spreadAndRest,\n    // destructureArray\n\n} from \"./lessons/lesson-one\";\n\nclassicStringConcatenation();\n// stringTemplates();\n// ternaries();\n// objectLiterals();\n// spreadAndRest();\n// destructureArray();"]}