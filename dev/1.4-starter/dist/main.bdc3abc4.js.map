{"version":3,"sources":["js/lessons/lesson-one.js","js/main.js"],"names":["classicStringConcatenation","stringBase","result","console","log","stringTemplates","addition","ternaries","equipment","equipmentCheck","reduce","ball"],"mappings":";AA2IA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,QAAA,gCAAA,EA3IA,IAAMA,EAA6B,WACzBC,IAQAC,EARa,kCACE,EAO8B,GAEnDC,QAAQC,IAAIF,IAgIhB,QAAA,2BAAA,EA5HA,IAAMG,EAAkB,WAOpBF,QAAQC,IAAOH,GAAAA,OANI,iCAMSK,OAAS,EAAG,UAqH5C,QAAA,gBAAA,EAnGA,IAAMC,EAAY,WACRC,IACAC,EADY,CAAC,OAAQ,MAAO,MAAO,eAAgB,OAAQ,OAAQ,OAAQ,QAChDC,QASjCP,QAAQC,IAA4B,IAAxBK,EAAeE,KAAwBF,WAAAA,OAAAA,EAAeE,KAAY,QAAA,kBAE1E;;ACfR,aAfA,IAAA,EAAA,QAAA,yBAUA,EAAA,EAAA,+BACA,EAAA,EAAA,oBACA,EACA,EAAA","file":"main.bdc3abc4.js","sourceRoot":"..","sourcesContent":["const classicStringConcatenation = ()=>{\n    const stringBase = 'The answer to the problem is: ';\n    const initialValue = 1;\n\n    const addition = (a, b) => {\n        return a + b;\n\n    }\n\n    const result = stringBase + addition(initialValue, 5);\n\n    console.log(result);\n}\n\n\nconst stringTemplates = () => {\n    const stringBase = 'The answer to the problem is:';\n    const initialValue = 1;\n\n    const addition = (a, b) => {\n        return a + b;\n    }\n    console.log(`${stringBase}${addition(1, \"five\")}`);\n}\n\nexport {\n    classicStringConcatenation,\n    stringTemplates,\n}\n\n// const stringTemplates = () => {\n//     const stringBase = 'The answer to the problem is: ';\n//     const initialValue = 0;\n\n//     const additionValues = [0, 1, 2, 3, 4, 5, 6, 7];\n//     const addition = (a, b) => a + b;\n\n//     console.log(`${stringBase}${additionalValues.reduce(addition, initialValue)}`);\n// }\n\nconst ternaries = () => {\n    const equipment = ['ball', 'net', 'net', 'water cooler', 'flag', 'flag', 'flag', 'flag'];\n    const equipmentCheck = equipment.reduce[(item, result) => {\n        item[result] = [item[result] || 0] + 1; return item;\n        \n        console.log[equipmentCheck.ball >= 1 ? \"We have a ball\" : \"We need a ball\"],\n        console.log[equipmentCheck.net >= 2 ? \"We have enough nets\" : \"We need more nets\"],\n\n\n    console.log[equipmentCheck.net >= 2 ? `We have ${equipmentCheck.nets}nets` : \"We need more nets\"];\n    },\n    console.log[equipmentCheck.ball === 1 ? `We have ${equipmentCheck.ball}ball`: \"We need a ball\"],   \n        \n        {}];\n    \n\n}\n\n// const ternaries = () => {\n//     const equipment = ['ball', 'net', 'net', 'water cooler', 'flag', 'flag', 'flag', 'flag'];\n\n    // console.log[equipmentCheck.ball === 1 ? `We have ${equipmentCheck.ball}ball`: \"We need a ball\"];\n    // console.log[equipmentCheck.net >= 2 ? `We have ${equipmentCheck.nets}nets` : \"We need more nets\"];\n    \n// }\n\n// const objectLiterals = () => {\n//     const createGreetingCard = (\n//         nameTo,\n//         nameFrom,\n//         opening,\n//         closing,\n//         massage) => {\n//         {\n//             nameTo,\n//             nameFrom,\n//             opening,\n//             closing,\n//             massage\n//         }\n//     };\n\n//     const newGreeting = createGreetingCard(\"Ember\", \"Woody\", \"Dear\", \"Love\", \"You're my favorite Deputy\");\n\n//     console.log(newGreeting);\n//     console.log(newGreeting.nameTo);\n\n// }\n\n// export {\n//     classicStringConcatenation,\n//     stringTemplates,\n//     ternaries,\n//     objectLiterals,\n// }\n\n// const spreadAndRest = () => {\n//     const stringBase = 'The answer to the problem is: ';\n//     const initialValue = 0;\n\n//     const addition = (...numbers) => {\n//         return numbers.reduce(reducer, initialValue);\n//     }\n\n//     const result = stringBase + addition(1, 2, 3, 4, 5, 6, 100, 200, 300, 500);\n\n//     console.log(result);\n// }\n\n// export {\n//     classicStringConcatenation,\n//     stringTemplates,\n//     ternaries,\n//     objectLiterals,\n//     spreadAndRest\n// }\n\n// const listOfNumbers = [1, 2, 3, 4, 5, 6, 100, 200, 300, 500];\n// const copyOfListOfNumbers = [...listOfNumbers];\n// console.log({ listOfNumbers });\n// console.log({ copyOfListOfNumbers });\n\n// const destructureArray = () => {\n//     const manufacturers = ['Ford', 'BMW', 'KIA', 'Dodge', 'Mercedes', 'Lincoln', 'Audi'];\n\n//     const [manufacturer, ...more] = manufacturers;\n\n//     console.log(manufacturer);\n//     console.log(more);\n//     console.log(`${manufacturer} and ${more.length} more manufacturers`);\n// }\n\n// export {\n//     classicStringConcatenation,\n//     stringTemplates,\n//     ternaries,\n//     objectLiterals,\n//     spreadAndRest,\n//     destructureArray\n// }\n    \n","// import color from './modules/demo.js';\n// import {\n//     soda,\n//     candy\n// } from \"./modules/demo2.js\";\n\n// console.log({ color });\n// console.log({ candy });\n\n// import {\n//     theForLoop,\n//     theForEachLoop,\n//     theMapHelper,\n//     theFilterHelper,\n//     theReduceHelper,\n// } from \"./lessons/ES6arrayHelpers\";\n\n// theForLoop();\n// theForEachLoop();\n// theMapHelper();\n// theFilterHelper();\n// theReduceHelper();\n\nimport {\n    classicStringConcatenation,\n    stringTemplates,\n    ternaries,\n    // objectLiterals,\n    // spreadAndRest,\n    // destructureArray\n\n} from \"./lessons/lesson-one\";\n\nclassicStringConcatenation();\nstringTemplates();\nternaries();\n// objectLiterals();\n// spreadAndRest();\n// destructureArray();"]}